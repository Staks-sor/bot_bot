import asyncio
from datetime import datetime
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from bd.count_bd import get_connect_heroku_bd, get_id, get_id_index, user_reg, user_examination
from config.config_token import TOKEN
from config.config_token import WETHER_TOKEN
from des.des import *
from generator.generator import *
from markup import markup as nav
from wether.wether import open_wether

bot = Bot(token=TOKEN)
loop = asyncio.get_event_loop()
dp = Dispatcher(bot, storage=MemoryStorage(), loop=loop)
dp.middleware.setup(LoggingMiddleware())

index = int(get_id_index())
print(index, "–≠—Ç–æ –∏–Ω–¥–µ–∫—Å")


class Form(StatesGroup):
    city = State()
    gor = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ü—Ä–∏–≤–µ—Ç {0.first_name}! \n –Ø –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è(–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è)'.format(
                               message.from_user),
                           reply_markup=nav.mainMenu)
    chat_id = 459830083
    await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.message_handler(commands=['faq'])
async def process_start_command(message: types.Message):
    await message.reply(faq)


@dp.message_handler(commands=['author'])
async def process_start_command(message: types.Message):
    await message.reply(author)


@dp.message_handler(Text(equals='–í–æ–π—Ç–∏'))
async def regestration_commands(message: types.Message):
    if message.text == '–í–æ–π—Ç–∏':
        if not user_examination(message.from_user.id):
            user_reg(message.from_user.first_name, int(message.from_user.id))
            await bot.send_message(message.from_user.id, "–í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=nav.menu_personal)
        else:
            await bot.send_message(message.from_user.id, "–í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=nav.menu_personal)


@dp.message_handler(Text(equals='–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å'))
async def profail_user(message: types.Message):
    if message.text == '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å':
        await bot.send_message(message.from_user.id, "–í—ã –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ",
                               reply_markup=nav.menu_profail)


@dp.message_handler(Text(equals='–°–æ–∑–¥–∞—Ç—å –¢–ó'))
async def create_tz(message: types.Message):
    if message.text == '–°–æ–∑–¥–∞—Ç—å –¢–ó':
        await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
                               reply_markup=nav.menu_profail)


@dp.message_handler(Text(equals='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ'))
async def create_resume(message: types.Message):
    if message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ':
        await bot.send_message(message.from_user.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ",
                               reply_markup=nav.menu_profail)



@dp.message_handler(Text(equals='–ù–∞–π—Ç–∏ –¢–ó'))
async def search_tz(message: types.Message):
    if message.text == '–ù–∞–π—Ç–∏ –¢–ó':
        await bot.send_message(message.from_user.id,
                               "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (python, java, django)",
                               reply_markup=nav.menu_profail)


@dp.message_handler(Text(equals='–ù–∞–π—Ç–∏ —Ä–µ–∑—é–º–µ'))
async def search_resume(message: types.Message):
    if message.text == '–ù–∞–π—Ç–∏ —Ä–µ–∑—é–º–µ':
        await bot.send_message(message.from_user.id,
                               "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (python, java, django)",
                               reply_markup=nav.menu_profail)


@dp.message_handler(Text(equals='ü§î–ü–æ–ª–µ–∑–Ω–æ–µ'))
async def polza_commands(message: types.Message):
    if message.text == 'ü§î–ü–æ–ª–µ–∑–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –ø–æ–≥–æ–¥—É –∏ –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥',
                               reply_markup=nav.wetherMenu)


@dp.message_handler(Text(equals='üå§–ü–æ–≥–æ–¥–∞üå§'))
async def whether_commands(message: types.Message):
    if message.text == 'üå§–ü–æ–≥–æ–¥–∞üå§':
        await bot.send_message(message.from_user.id,
                               'üå§–ü–æ–≥–æ–¥–∞üå§',
                               reply_markup=nav.wetherMenu)
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.message_handler(Text(equals='üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—Éüå§'))
async def whether_pol_commands(message: types.Message):
    if message.text == "üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—Éüå§":
        await Form.city.set()
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!")
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username)


@dp.message_handler(Text(equals='üòÇ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'))
async def happy_commands(message: types.Message):
    if message.text == 'üòÇ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è':
        await bot.send_message(message.from_user.id, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–∞, –±—Ä–µ–¥–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø',
                               reply_markup=nav.otherMenu)
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.message_handler(Text(equals='ü§¨–ú–∞—Ç'))
async def mat_commands(message: types.Message):
    if message.text == 'ü§¨–ú–∞—Ç':
        await bot.send_message(message.from_user.id, 'ü§¨–ú–∞—Ç',
                               reply_markup=nav.matMenu)
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.message_handler(Text(equals='üë®–î–ª—è –ø–∞—Ä–Ω—è'))
async def mat_man_commands(message: types.Message):
    if message.text == 'üë®–î–ª—è –ø–∞—Ä–Ω—è':
        await message.answer(for_man())
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.message_handler(Text(equals='üë©–î–ª—è –¥–µ–≤—É—à–∫–∏'))
async def mat_woman_commands(message: types.Message):
    if message.text == 'üë©–î–ª—è –¥–µ–≤—É—à–∫–∏':
        await message.answer(for_women())
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.message_handler(Text(equals='‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def main_commands(message: types.Message):
    if message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                               reply_markup=nav.mainMenu)


@dp.message_handler(Text(equals='‚¨Ö –ù–∞–∑–∞–¥'))
async def main_commands(message: types.Message):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await bot.send_message(message.from_user.id, '‚¨Ö –ù–∞–∑–∞–¥',
                               reply_markup=nav.menu_personal)


@dp.message_handler(Text(equals='‚ôà–ì–æ—Ä–æ—Å–∫–æ–ø‚ôì'))
async def gor_commands(message: types.Message):
    if message.text == '‚ôà–ì–æ—Ä–æ—Å–∫–æ–ø‚ôì':
        await bot.send_message(message.from_user.id, '‚ôà–ì–æ—Ä–æ—Å–∫–æ–ø‚ôì', reply_markup=nav.goroskop_menu)


@dp.message_handler(Text(equals='–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø'))
async def main_commands(message: types.Message):
    if message.text == '–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø':
        await message.answer("*–í—ã–±–∏—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞*", reply_markup=nav.keyboard, parse_mode="MarkdownV2")
        # await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞‚ôà‚ôâ‚ôä‚ôã‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôì‚ôå")
        # await Form.gor.set()
        chat_id = 459830083
        await bot.send_message(chat_id, message.from_user.username, "–∑–∞—Ö–æ–¥–∏–ª –∫–∞–∫–æ–π —Ç–æ —á–µ–ª")


@dp.callback_query_handler(Text(equals="–û–≤–µ–Ω"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–û–≤–µ–Ω", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–¢–µ–ª–µ—Ü"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–¢–µ–ª–µ—Ü", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–ë–ª–∏–∑–Ω–µ—Ü—ã"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–ë–ª–∏–∑–Ω–µ—Ü—ã", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–†–∞–∫"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–†–∞–∫", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–õ–µ–≤"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–õ–µ–≤", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–î–µ–≤–∞"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–î–µ–≤–∞", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–í–µ—Å—ã"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–í–µ—Å—ã", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–°–∫–æ—Ä–ø–∏–æ–Ω"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–°–∫–æ—Ä–ø–∏–æ–Ω", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–°—Ç—Ä–µ–ª–µ—Ü"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–°—Ç—Ä–µ–ª–µ—Ü", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–ö–æ–∑–µ—Ä–æ–≥"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–ö–æ–∑–µ—Ä–æ–≥", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–í–æ–¥–æ–ª–µ–π"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–í–æ–¥–æ–ª–µ–π", id=index)
    await call.message.answer(goro)


@dp.callback_query_handler(Text(equals="–†—ã–±—ã"))
async def send_random_value(call: types.CallbackQuery):
    goro = get_connect_heroku_bd(zodiac="–†—ã–±—ã", id=index)
    await call.message.answer(goro)


@dp.message_handler(state=Form.city)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                               reply_markup=nav.mainMenu)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['city'] = message.text
            city = data['city']
            res = open_wether(city, WETHER_TOKEN)
            await message.answer(res)

        await state.finish()


async def sending_messages():
    global index
    while True:
        time_now = datetime.now()
        print(time_now.hour)
        if time_now.hour == 4:
            index += 1
            get_id(id=index)
            print('–°–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ', str(index))
            chat_id = 459830083
            await bot.send_message(chat_id, "–°–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ " + str(index))
            await asyncio.sleep(3600)
        await asyncio.sleep(500)


if __name__ == '__main__':
    dp.loop.create_task(sending_messages())
    executor.start_polling(dp, skip_updates=True)
